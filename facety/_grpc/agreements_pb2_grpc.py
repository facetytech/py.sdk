# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from facety._grpc import agreements_pb2 as facety_dot___grpc_dot_agreements__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class AdoptionStub(object):
    """Verification and logging of accepting Legal Agreements.

    The service provide the feature for verification user's status of accepting Legal Agreements
    and logging of accepting it.

    It contains two methods:
    - CheckProtocol - for verification of status of accepting Legal Agreements
    - AddProtocol - for adding new record about Legal Agreements was accepted
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CheckProtocol = channel.unary_unary(
                '/Adoption/CheckProtocol',
                request_serializer=facety_dot___grpc_dot_agreements__pb2.Selector.SerializeToString,
                response_deserializer=facety_dot___grpc_dot_agreements__pb2.Verdict.FromString,
                )
        self.AddProtocol = channel.unary_unary(
                '/Adoption/AddProtocol',
                request_serializer=facety_dot___grpc_dot_agreements__pb2.Protocol.SerializeToString,
                response_deserializer=facety_dot___grpc_dot_agreements__pb2.Selector.FromString,
                )
        self.AddRemark = channel.unary_unary(
                '/Adoption/AddRemark',
                request_serializer=facety_dot___grpc_dot_agreements__pb2.Remark.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class AdoptionServicer(object):
    """Verification and logging of accepting Legal Agreements.

    The service provide the feature for verification user's status of accepting Legal Agreements
    and logging of accepting it.

    It contains two methods:
    - CheckProtocol - for verification of status of accepting Legal Agreements
    - AddProtocol - for adding new record about Legal Agreements was accepted
    """

    def CheckProtocol(self, request, context):
        """Verification of status of accepting Legal Agreements.

        Args:
        Selector - contains id of a protocol was accepted

        Returns:
        Verdict - contains status of verification(bool), comment (string) and texts of actually Legal Agreements
        if the user's status of accepting Legal Agreements is not actual
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddProtocol(self, request, context):
        """Adding a new record about Legal Agreements was accepted.

        Args:
        Protocol - contains information about:
        - version, hash and language of Terms Of Services and Privacy Policy;
        - list of country's remarks (version, hash & country);
        the user was accepted.

        Returns:
        Selector - contains id of a protocol was accepted
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddRemark(self, request, context):
        """Adding a new record about Country Remark was accepted.

        Args:
        Remark - contains information about:
        - version, hash and country of Country Remark;
        - id of a protocol added to.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AdoptionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CheckProtocol': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckProtocol,
                    request_deserializer=facety_dot___grpc_dot_agreements__pb2.Selector.FromString,
                    response_serializer=facety_dot___grpc_dot_agreements__pb2.Verdict.SerializeToString,
            ),
            'AddProtocol': grpc.unary_unary_rpc_method_handler(
                    servicer.AddProtocol,
                    request_deserializer=facety_dot___grpc_dot_agreements__pb2.Protocol.FromString,
                    response_serializer=facety_dot___grpc_dot_agreements__pb2.Selector.SerializeToString,
            ),
            'AddRemark': grpc.unary_unary_rpc_method_handler(
                    servicer.AddRemark,
                    request_deserializer=facety_dot___grpc_dot_agreements__pb2.Remark.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Adoption', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Adoption(object):
    """Verification and logging of accepting Legal Agreements.

    The service provide the feature for verification user's status of accepting Legal Agreements
    and logging of accepting it.

    It contains two methods:
    - CheckProtocol - for verification of status of accepting Legal Agreements
    - AddProtocol - for adding new record about Legal Agreements was accepted
    """

    @staticmethod
    def CheckProtocol(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Adoption/CheckProtocol',
            facety_dot___grpc_dot_agreements__pb2.Selector.SerializeToString,
            facety_dot___grpc_dot_agreements__pb2.Verdict.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddProtocol(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Adoption/AddProtocol',
            facety_dot___grpc_dot_agreements__pb2.Protocol.SerializeToString,
            facety_dot___grpc_dot_agreements__pb2.Selector.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddRemark(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Adoption/AddRemark',
            facety_dot___grpc_dot_agreements__pb2.Remark.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ReceivingStub(object):
    """Get the Legal Agreements texts and their versions.

    Service find the texts for the current user's country and language.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Texts = channel.unary_unary(
                '/Receiving/Texts',
                request_serializer=facety_dot___grpc_dot_agreements__pb2.User.SerializeToString,
                response_deserializer=facety_dot___grpc_dot_agreements__pb2.Agreements.FromString,
                )


class ReceivingServicer(object):
    """Get the Legal Agreements texts and their versions.

    Service find the texts for the current user's country and language.
    """

    def Texts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReceivingServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Texts': grpc.unary_unary_rpc_method_handler(
                    servicer.Texts,
                    request_deserializer=facety_dot___grpc_dot_agreements__pb2.User.FromString,
                    response_serializer=facety_dot___grpc_dot_agreements__pb2.Agreements.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Receiving', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Receiving(object):
    """Get the Legal Agreements texts and their versions.

    Service find the texts for the current user's country and language.
    """

    @staticmethod
    def Texts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Receiving/Texts',
            facety_dot___grpc_dot_agreements__pb2.User.SerializeToString,
            facety_dot___grpc_dot_agreements__pb2.Agreements.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
